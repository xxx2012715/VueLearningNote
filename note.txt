note:
	{{x}}： 插值表达式,用于输出对象属性和函数返回值
	属性：
	el	element, 即需要获取的元素，必须是html中的(根)容器元素
	data 	数据的存储
	methods	 方法

	事件：
	v-bind(data-binding)	属性绑定
	v-html 	 用于输出 html 代码
	v-text innertext值改为指定值
	v-on:click/dblclick/mousemove		事件绑定
	v-on:click.once		点击事件只会触发一次
	v-on:click.stop/submit.prevent/
	v-if/else： ！存在，从DOM中移除
	v-show：		 存在，display="none"

	计算属性computed
	{{ message.splite('').reverse().join('') }}

	监听属性：
	$watch, oval(old_value), nval(new_value)

	事件处理：
	stop, prevent, once, capture, self

	键盘事件：
	keyup.enter.alt

	计算属性：	--computed/methods--
	变化较大时，如搜索。

	双向数据绑定：	v-model
		1.input, textarea,  
		2.checkbox  value  list: []
		3.select  value  list: ''
		修饰符： .lazy, .number, .trim

	钩子函数
	指令定义函数提供了几个钩子函数（可选）：
	bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
	inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
	update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。
	componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。
	unbind: 只调用一次， 指令与元素解绑时调用。

	钩子函数的参数有：
	el: 指令所绑定的元素，可以用来直接操作 DOM 。
	binding: 一个对象，包含以下属性：
	name: 指令名，不包括 v- 前缀。
	value: 指令的绑定值， 例如： v-my-directive="1 + 1", value 的值是 2。
	oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
	expression: 绑定值的表达式或变量名。 例如 v-my-directive="1 + 1" ， expression 的值是 "1 + 1"。
	arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 "foo"。
	modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。
	vnode: Vue 编译生成的虚拟节点。
	oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。

	条件渲染：
	v-if input key="a"  
	v-else input key="b"	不会复用

	列表渲染： value, key, index-->in this order
	v-for="item in list"	{{item}}
	----list: item in list 	object: value of object----

	list操作:
	pop   push	 shift	 unshift    splice    sort	 

	Vue.set 
		1.改变对象内容实现数据变化
		
day04:
	is:
		h5编码规范中table下tbody下tr，若tr替换为其他组件需添加is属性指向组件,同ul>li, ol>li, select>option等等

	data: ()
		非根组件下，data是一个函数而非对象，需state为函数且返回需要的data内容,每个子组件都应该有自己的数据，通过函数返回对象使得子组件拥有自己的数据

	ref: 
		this.$refs.'ref_value' 获取DOM对象,若为标签,则获得为DOM元素,若为父组件则为组件引用

	父子组件传值:
		1.v-bind加冒号则传递数字,否则传递为字符串
		2.单向数据流,父组件传递给子组件的内容不要修改,只能使用。可拷贝，作为副本修改使用。
		3.父组件通过属性bind传值，子组件通过事件触发的形式传值

	组件参数校验与非Props特性:
		props: { type: , required, default}
		非Props特性--父组件传值，子组件不接收，无法使用

	组件绑定原生事件:
		组件上添加@click.native="", 即native修饰符即可

	非父子组件间传值(Bud/总线/发布订阅模式/观察者模式):
		总线机制:
		1.Vue.prototype.bus = new Vue();
		2.methods > this.bus.$emit('', this.value);
		3.mounted > this.bus.$on('', function(){})

	Vue中的插槽(slot):
		父组件<child>	
				<p slot="s1"></p> 
					content	
				<p slot="s2"></p>  
			 </child>
		子组件template: 
			<slot name="s1"></slot>
			<slot name="s2"></slot>
	作用域插槽:
		template slot-scope="x"
		{{x.item}}

		<slot v-for="item of list" :item=item></slot>







